plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'idea'
    id "com.github.ben-manes.versions" version "0.44.0"
    id 'signing'
    id 'maven-publish'
    id 'checkstyle'
}

version project.hasProperty('version') ? version : '0.1.0'

sourceCompatibility = 11
targetCompatibility = 11

group = 'co.ntbl.podcastfeedhandler'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// signing {
//     sign configurations.archives
// }

signing {
    def signingKey = System.getenv("GPG_SIGNING_KEY")
    def signingPassword = System.getenv("GPG_SIGNING_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

test {
//    minHeapSize = "256m" // initial heap size
//    maxHeapSize = "1024m" // maximum heap size
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true

        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //  org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    // https://mvnrepository.com/artifact/org.xmlunit/xmlunit-assertj3
    testImplementation group: 'org.xmlunit', name: 'xmlunit-assertj', version: '2.9.1'
    testImplementation group: 'com.icosillion.podengine', name: 'podengine', version: '2.4.1'


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/daberkow/PodcastFeedHandler")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }


    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}