plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'idea'
    id "com.github.ben-manes.versions" version "0.44.0"
    id 'signing'
    id 'maven-publish'
    id 'checkstyle'
}

version = '0.1.0'

sourceCompatibility = 11
targetCompatibility = 11

rootProject.description = 'Read and Write Podcast feeds from Java.'

group = 'co.ntbl.podcastfeedhandler'

jar {
    manifest {
        attributes(
                "Class-Path": "co.ntbl.podcastfeedhandler",
                "Main-Class": "PodcastFeedHandler",
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Implementation-Vendor": "Daniel Berkowitz",
                "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                "Gradle-Version": GradleVersion.current().toString()
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

// task javadocJar(type: Jar) {
//     classifier = 'javadoc'
//     from javadoc
// }

// task sourcesJar(type: Jar) {
//     classifier = 'sources'
//     from sourceSets.main.allSource
// }

// artifacts {
//     archives javadocJar, sourcesJar
// }

// signing {
//     sign configurations.archives
// }

ext.admin = System.getenv("MAVEN_USERNAME")

signing {
    required { admin }
    def signingKey = System.getenv("GPG_SIGNING_KEY")
    def signingPassword = System.getenv("GPG_SIGNING_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    // sign configurations.archives
    sign publishing.publications
}

test {
//    minHeapSize = "256m" // initial heap size
//    maxHeapSize = "1024m" // maximum heap size
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true

        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //  org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    // https://mvnrepository.com/artifact/org.xmlunit/xmlunit-assertj3
    testImplementation group: 'org.xmlunit', name: 'xmlunit-assertj', version: '2.9.1'
    testImplementation group: 'com.icosillion.podengine', name: 'podengine', version: '2.4.1'


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// publishing {
//     repositories {
//         maven {
//             name = "GitHubPackages"
//             url = uri("https://maven.pkg.github.com/daberkow/PodcastFeedHandler")
//             credentials {
//                 username = System.getenv("GITHUB_ACTOR")
//                 password = System.getenv("GITHUB_TOKEN")
//             }
//         }
//         maven {
//             name = "OSSRH"
//             url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//             credentials {
//                 username = System.getenv("MAVEN_USERNAME")
//                 password = System.getenv("MAVEN_PASSWORD")
//             }
//         }
//     }

//     publications {
//         gpr(MavenPublication) {
//             from(components.java)
//         }
//     }
// }

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

//
// MAVEN
//

// artifacts {
//     archives jar
//     archives sourcesJar
//     archives javadocJar
// }

// signing {
//     required { admin }
//     sign configurations.archives
// }

def isReleaseVersion = !version.toString().endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // customizePom(pom, rootProject)

            // artifact sourcesJar
            // artifact javadocJar

            pom {
                name = 'PodcastFeedHandler'
                description = rootProject.description
                url = 'https://github.com/daberkow/PodcastFeedHandler'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/daberkow/PodcastFeedHandler/blob/main/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'daberkow'
                        name = 'Daniel Berkowitz'
                        email = 'dansberkowitz@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/daberkow/PodcastFeedHandler.git'
                    developerConnection = 'scm:git:ssh://git@github.com:daberkow/PodcastFeedHandler.git'
                    url = 'https://github.com/daberkow/PodcastFeedHandler'
                }
            }
        

            // if (admin) {
            //     // sign the pom
            //     pom.withXml {
            //         def pomFile = file("${project.buildDir}/generated-pom.xml")
            //         writeTo(pomFile)
            //         def pomAscFile = signing.sign(pomFile).signatureFiles[0]
            //         artifact(pomAscFile) {
            //             classifier = null
            //             extension = 'pom.asc'
            //         }
            //         pomFile.delete()
            //     }

            //     // sign the artifacts
            //     project.tasks.signArchives.signatureFiles.each {
            //         artifact(it) {
            //             def matcher = it.file =~ /-(sources|javadoc|jre9)\.jar\.asc$/
            //             if (matcher.find()) {
            //                 classifier = matcher.group(1)
            //             } else {
            //                 classifier = null
            //             }
            //             extension = 'jar.asc'
            //         }
            //     }
            // }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if (admin) {
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


// def customizePom(pom, gradleProject) {
//     pom.withXml {
//         def root = asNode()

//         // add all items necessary for maven central publication
//         root.children().last() + {
//             resolveStrategy = Closure.DELEGATE_FIRST

//             name 'PodcastFeedHandler'
//             description gradleProject.description
//             url 'https://github.com/daberkow/PodcastFeedHandler'
//             organization {
//                 name 'Daniel Berkowitz'
//                 url 'https://ntbl.co'
//             }
//             issueManagement {
//                 system 'GitHub'
//                 url 'https://github.com/daberkow/PodcastFeedHandler/issues'
//             }
//             licenses {
//                 license {
//                     name 'MIT License'
//                     url 'https://github.com/daberkow/PodcastFeedHandler/blob/main/LICENSE'
//                     distribution 'repo'
//                 }
//             }
//             scm {
//                 url 'https://github.com/daberkow/PodcastFeedHandler'
//                 connection 'scm:git:git://github.com/daberkow/PodcastFeedHandler.git'
//                 developerConnection 'scm:git:ssh://git@github.com:daberkow/PodcastFeedHandler.git'
//             }
//             developers {
//                 developer {
//                     id 'daberkow'
//                     name 'Daniel Berkowitz'
//                     email 'dansberkowitz@gmail.com'
//                     timezone '-5'
//                 }
//             }
//         }
//     }
// }

// task install(dependsOn: publishToMavenLocal) {
//     group = 'Publishing'
//     description = 'Installs artifacts to local Maven repository'
// }